<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ARGUMENTS_MUST_BE_DIFFERENT_OBJECTS" xml:space="preserve">
    <value>Arguments must be different objects.</value>
  </data>
  <data name="ARGUMENT_CANNOT_BE_NEGATIVE" xml:space="preserve">
    <value>Argument cannot be negative.</value>
  </data>
  <data name="ARGUMENT_OUTSIDE_DOMAIN" xml:space="preserve">
    <value>Argument {0} outside domain [{1} ; {2}]</value>
  </data>
  <data name="ARGUMENT_OUT_OF_RANGE" xml:space="preserve">
    <value>Argument out of range.</value>
  </data>
  <data name="ARITHMETIC_EXCEPTION" xml:space="preserve">
    <value>arithmetic exception</value>
  </data>
  <data name="ARRAY_ELEMENT" xml:space="preserve">
    <value>value {0} at index {1}</value>
  </data>
  <data name="ARRAY_INVALID_ORDER_DIRECTION" xml:space="preserve">
    <value>Invalid Order Direction</value>
  </data>
  <data name="ARRAY_ONLY_SUPPORTED_THIS_TIME" xml:space="preserve">
    <value>Only LowerTriangular, UpperTriangular and Diagonal matrices are supported at this time.</value>
  </data>
  <data name="ARRAY_ORDER" xml:space="preserve">
    <value>order</value>
  </data>
  <data name="ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1" xml:space="preserve">
    <value>array sizes should have difference 1 ({0} != {1} + 1)</value>
  </data>
  <data name="ARRAY_SIZE_EXCEEDS_MAX_VARIABLES" xml:space="preserve">
    <value>array size cannot be greater than {0}</value>
  </data>
  <data name="ARRAY_SUMS_TO_ZERO" xml:space="preserve">
    <value>array sums to zero</value>
  </data>
  <data name="ARRAY_THE_ARRAY_IS_NON_MONOTONIC_SEQUENCE" xml:space="preserve">
    <value>The array is non monotonic sequence, the value {0} is smaller than the previous value {1} of order by {2}, {3}.</value>
  </data>
  <data name="ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED" xml:space="preserve">
    <value>a null or zero length array not allowed</value>
  </data>
  <data name="ASSERTION_FAILURE" xml:space="preserve">
    <value>Assertion failure</value>
  </data>
  <data name="AutoParallel_ThresholdValueNegative" xml:space="preserve">
    <value>The threshold value cannot be negative or zero.</value>
  </data>
  <data name="BASE" xml:space="preserve">
    <value>base ({0})</value>
  </data>
  <data name="BIGDECIMAL_CANNOT_CAST_TO_CHAR" xml:space="preserve">
    <value>Cannot cast BigDecimal to Char</value>
  </data>
  <data name="BIGDECIMAL_CANNOT_CAST_TO_DATETIME" xml:space="preserve">
    <value>Cannot cast BigDecimal to DateTime</value>
  </data>
  <data name="BIGDECIMAL_COMPARE_TO_OBJECT_MUST_BE_A_BIGDECIMAL" xml:space="preserve">
    <value>Compare to object must be a BigDecimal</value>
  </data>
  <data name="BIGDECIMAL_THE_VALUE_CANNOT_FIT_INTO" xml:space="preserve">
    <value>The value {0} cannot fit into {1}.</value>
  </data>
  <data name="BIGINTEGER_VALUE" xml:space="preserve">
    <value>value</value>
  </data>
  <data name="BINOMIAL_INVALID_PARAMETERS_ORDER" xml:space="preserve">
    <value>must have n &gt;= k for binomial coefficient (n, k), got k = {0}, n = {1}</value>
  </data>
  <data name="BINOMIAL_NEGATIVE_PARAMETER" xml:space="preserve">
    <value>must have n &gt;= 0 for binomial coefficient (n, k), got n = {0}</value>
  </data>
  <data name="BITARRAY_FROMINDEX_IS_NEGATIVE" xml:space="preserve">
    <value>fromIndex &lt; 0:</value>
  </data>
  <data name="CannotCompareProperty" xml:space="preserve">
    <value>Cannot compare property '{0}.{1}'.</value>
  </data>
  <data name="CannotCompareValues" xml:space="preserve">
    <value>Cannot compare values. {0}</value>
  </data>
  <data name="CANNOT_CALCULATE_SQUARE_ROOT_FROM_A_NEGATIVE_NUMBER" xml:space="preserve">
    <value>Cannot calculate square root from a negative number</value>
  </data>
  <data name="CollectionCountsForPropertyDoNotMatch" xml:space="preserve">
    <value>Collection counts for property '{0}.{1}' do not match.</value>
  </data>
  <data name="CoreSourceDestinationObjectsAreNull" xml:space="preserve">
    <value>Source or/and Destination Objects are null</value>
  </data>
  <data name="DIMENSION" xml:space="preserve">
    <value>dimension ({0})</value>
  </data>
  <data name="DIMENSIONS_MISMATCH" xml:space="preserve">
    <value>dimensions mismatch</value>
  </data>
  <data name="DIMENSIONS_MISMATCH_2x2" xml:space="preserve">
    <value>got {0}x{1} but expected {2}x{3}</value>
  </data>
  <data name="DIMENSIONS_MISMATCH_SIMPLE" xml:space="preserve">
    <value>{0} != {1}</value>
  </data>
  <data name="Exception_FromToSize" xml:space="preserve">
    <value>from: {0}, to: {1}, size={2}</value>
  </data>
  <data name="EXPONENT" xml:space="preserve">
    <value>exponent ({0})</value>
  </data>
  <data name="FACTORIAL_NEGATIVE_PARAMETER" xml:space="preserve">
    <value>must have n &gt;= 0 for n!, got n = {0}</value>
  </data>
  <data name="GCD_OVERFLOW_32_BITS" xml:space="preserve">
    <value>overflow: gcd({0}, {1}) is 2^31</value>
  </data>
  <data name="GCD_OVERFLOW_64_BITS" xml:space="preserve">
    <value>overflow: gcd({0}, {1}) is 2^63</value>
  </data>
  <data name="INDEX" xml:space="preserve">
    <value>index ({0})</value>
  </data>
  <data name="INDEX_LARGER_THAN_MAX" xml:space="preserve">
    <value>the index specified: {0} is larger than the current maximal index {1}</value>
  </data>
  <data name="INDEX_NOT_POSITIVE" xml:space="preserve">
    <value>index ({0}) is not positive</value>
  </data>
  <data name="INDEX_OUT_OF_RANGE" xml:space="preserve">
    <value>index {0} out of allowed range [{1}, {2}]</value>
  </data>
  <data name="INPUT_ARRAY" xml:space="preserve">
    <value>input array</value>
  </data>
  <data name="INVALID_ARGUMENTS" xml:space="preserve">
    <value>invalid {0} arguments</value>
  </data>
  <data name="INVALID_IMPLEMENTATION" xml:space="preserve">
    <value>required functionality is missing in {0}</value>
  </data>
  <data name="INVALID_IMPLEMENTATION1" xml:space="preserve">
    <value>{0}に必要な機能がありません。</value>
  </data>
  <data name="INVALID_OPERATION_NEGATIVE_BASE_AND_NON_INTEGER_POWER" xml:space="preserve">
    <value>Invalid Operation: negative base and non-integer power</value>
  </data>
  <data name="INVALID_OPERATION_ZERO_BASE_AND_NEGATIVE_POWER" xml:space="preserve">
    <value>Invalid Operation: zero base and negative power</value>
  </data>
  <data name="ItemInPropertyCollectionDoesNotMatch" xml:space="preserve">
    <value>Item {0} in property collection '{1}.{2}' does not match.</value>
  </data>
  <data name="LARGEARRAY_CONSTANT_ARRAYS_CANNOT_BE_MODIFIED" xml:space="preserve">
    <value>Constant arrays cannot be modified.</value>
  </data>
  <data name="LARGEARRAY_DESTPOS_SIZE_ERROR" xml:space="preserve">
    <value>destPos &lt; 0 || destPos &gt;= destination.Capacity</value>
  </data>
  <data name="LARGEARRAY_LENGTH_ERROR" xml:space="preserve">
    <value>Length &lt; 0</value>
  </data>
  <data name="LARGEARRAY_SRCPOS_SIZE_ERROR" xml:space="preserve">
    <value>srcPos &lt; 0 || srcPos &gt;= source.Capacity</value>
  </data>
  <data name="LCM_OVERFLOW_32_BITS" xml:space="preserve">
    <value>overflow: lcm({0}, {1}) is 2^31</value>
  </data>
  <data name="LCM_OVERFLOW_64_BITS" xml:space="preserve">
    <value>overflow: lcm({0}, {1}) is 2^63</value>
  </data>
  <data name="LENGTH" xml:space="preserve">
    <value>length ({0})</value>
  </data>
  <data name="LINKEDDICTIONARY_COULD_NOT_FIND_THE_KEY" xml:space="preserve">
    <value>Could not find the key.</value>
  </data>
  <data name="LINKEDHASHSET_OTHER_CANNOT_BE_NULL" xml:space="preserve">
    <value>other cannot be null</value>
  </data>
  <data name="MATRIX_CANNOT_BE_NULL" xml:space="preserve">
    <value>Matrix {0} cannot be null.</value>
  </data>
  <data name="MATRIX_COLUMN_DIMENSIONS_MUST_AGREE" xml:space="preserve">
    <value>Matrix column dimensions must agree.</value>
  </data>
  <data name="MATRIX_DIMENSIONS_DO_NOT_MATCH" xml:space="preserve">
    <value>Matrix dimensions do not match</value>
  </data>
  <data name="MATRIX_DIMENSIONS_MUST_AGREE" xml:space="preserve">
    <value>Matrix dimensions must agree.</value>
  </data>
  <data name="MATRIX_HAS_MORE_COLUMN_TNAN_ROWS" xml:space="preserve">
    <value>Matrix has more columns than rows.</value>
  </data>
  <data name="MATRIX_IS_NOT_A_SQUARE_MATRIX" xml:space="preserve">
    <value>Matrix is not a square matrix.</value>
  </data>
  <data name="MATRIX_IS_NOT_POSITIVE_DEFINITE" xml:space="preserve">
    <value>Matrix is not positive definite.</value>
  </data>
  <data name="MATRIX_IS_RANK_DEFICIENT" xml:space="preserve">
    <value>Matrix is rank deficient.</value>
  </data>
  <data name="MATRIX_IS_SINGULAR" xml:space="preserve">
    <value>Matrix is singular.</value>
  </data>
  <data name="MATRIX_MUST_BE_IN_SPARSE_STORAGE_FORMAT" xml:space="preserve">
    <value>Matrix must be in sparse storage format.</value>
  </data>
  <data name="MATRIX_MUST_BE_POSITIVE_DEFINITE" xml:space="preserve">
    <value>Matrix must be positive definite</value>
  </data>
  <data name="MATRIX_MUST_BE_SQUARE" xml:space="preserve">
    <value>Matrix must be square.</value>
  </data>
  <data name="MATRIX_MUST_BE_SYMMETRIC" xml:space="preserve">
    <value>Matrix must be symmetric.</value>
  </data>
  <data name="MATRIX_MUST_NOT_BE_RANK_DEFICIENT" xml:space="preserve">
    <value>Matrix must not be rank deficient.</value>
  </data>
  <data name="MATRIX_MUST_NOT_BE_SINGULAR" xml:space="preserve">
    <value>Matrix must not be singular.</value>
  </data>
  <data name="MATRIX_ROW_DIMENSIONS_MUST_AGREE" xml:space="preserve">
    <value>Matrix row dimensions must agree.</value>
  </data>
  <data name="MATRIX_SHOULD_HAVE_THE_SAME_NUMBER_OF_ROWS" xml:space="preserve">
    <value>The matrix should have the same number of rows as the decomposition.</value>
  </data>
  <data name="MAX_COUNT_EXCEEDED" xml:space="preserve">
    <value>maximal count ({0}) exceeded</value>
  </data>
  <data name="MAX_ITERATIONS_EXCEEDED" xml:space="preserve">
    <value>maximal number of iterations ({0}) exceeded</value>
  </data>
  <data name="METHOD_ADDITION_OVERFLOWS_INT" xml:space="preserve">
    <value>Addition overflows an int: {0} + {1}</value>
  </data>
  <data name="METHOD_ADDITION_OVERFLOWS_LONG" xml:space="preserve">
    <value>Addition overflows a long: {0} + {1}</value>
  </data>
  <data name="METHOD_CALCULACTION_OVERFLOWS_INT" xml:space="preserve">
    <value>Calculation overflows an int: {0}</value>
  </data>
  <data name="METHOD_MULTIPLICTION_OVERFLOWS_INT" xml:space="preserve">
    <value>Multiplication overflows an int: {0} * {1}</value>
  </data>
  <data name="METHOD_MULTIPLICTION_OVERFLOWS_LONG" xml:space="preserve">
    <value>Multiplication overflows a long: {0} * {1}</value>
  </data>
  <data name="METHOD_PARAMETER_MUST_NOT_BE_NULL" xml:space="preserve">
    <value>{0}  must not be null</value>
  </data>
  <data name="METHOD_SUBTRACTION_OVERFLOWS_INT" xml:space="preserve">
    <value>Subtraction overflows an int: {0} - {1}</value>
  </data>
  <data name="METHOD_SUBTRACTION_OVERFLOWS_LONG" xml:space="preserve">
    <value>Subtraction overflows a long: {0} - {1}</value>
  </data>
  <data name="METHOD_VALUE_MUST_NOT_BE_NULL" xml:space="preserve">
    <value>Value must not be null</value>
  </data>
  <data name="METHOD_VALUE_MUST_NOT_BE_NULL1" xml:space="preserve">
    <value>Value must not be null</value>
  </data>
  <data name="MismatchWithPropertyFound" xml:space="preserve">
    <value>Mismatch with property '{0}.{1}' found.</value>
  </data>
  <data name="MUST_HAVE_N_IS_MORE_THAN_FOR_N_ABSOLUTE" xml:space="preserve">
    <value>must have n &gt; 0 for n!</value>
  </data>
  <data name="MUST_HAVE_N_IS_MORE_THAN_OR_EQUALS_FOR_N_ABSOLUTE" xml:space="preserve">
    <value>must have n &gt;= 0 for n!</value>
  </data>
  <data name="NON_SQUARE_MATRIX" xml:space="preserve">
    <value>non square ({0}x{1}) matrix</value>
  </data>
  <data name="NON_SQUARE_OPERATOR" xml:space="preserve">
    <value>non square ({0}x{1}) linear operator</value>
  </data>
  <data name="NON_SYMMETRIC_MATRIX" xml:space="preserve">
    <value>non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}</value>
  </data>
  <data name="NOT_DECREASING_NUMBER_OF_POINTS" xml:space="preserve">
    <value>points {0} and {1} are not decreasing ({2} &lt; {3})</value>
  </data>
  <data name="NOT_DECREASING_SEQUENCE" xml:space="preserve">
    <value>points {3} and {2} are not decreasing ({1} &lt; {0})</value>
  </data>
  <data name="NOT_INCREASING_NUMBER_OF_POINTS" xml:space="preserve">
    <value>points {0} and {1} are not increasing ({2} &gt; {3})</value>
  </data>
  <data name="NOT_INCREASING_SEQUENCE" xml:space="preserve">
    <value>points {3} and {2} are not increasing ({1} &gt; {0})</value>
  </data>
  <data name="NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS" xml:space="preserve">
    <value>points {0} and {1} are not strictly decreasing ({2} &lt;= {3})</value>
  </data>
  <data name="NOT_STRICTLY_DECREASING_SEQUENCE" xml:space="preserve">
    <value>points {3} and {2} are not strictly decreasing ({1} &lt;= {0})</value>
  </data>
  <data name="NOT_STRICTLY_INCREASING_KNOT_VALUES" xml:space="preserve">
    <value>knot values must be strictly increasing</value>
  </data>
  <data name="NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS" xml:space="preserve">
    <value>points {0} and {1} are not strictly increasing ({2} &gt;= {3})</value>
  </data>
  <data name="NOT_STRICTLY_INCREASING_SEQUENCE" xml:space="preserve">
    <value>points {3} and {2} are not strictly increasing ({1} &gt;= {0})</value>
  </data>
  <data name="NUMBERS_OF_KEYS_AND_VALUE_NOT_MATCH" xml:space="preserve">
    <value>Number of Keys and Values not match.</value>
  </data>
  <data name="NUMBER_TOO_LARGE" xml:space="preserve">
    <value>{0} is larger than the maximum ({1})</value>
  </data>
  <data name="NUMBER_TOO_LARGE_BOUND_EXCLUDED" xml:space="preserve">
    <value>{0} is larger than, or equal to, the maximum ({1})</value>
  </data>
  <data name="NUMBER_TOO_SMALL" xml:space="preserve">
    <value>{0} is smaller than the minimum ({1})</value>
  </data>
  <data name="NUMBER_TOO_SMALL_BOUND_EXCLUDED" xml:space="preserve">
    <value>{0} is smaller than, or equal to, the minimum ({1})</value>
  </data>
  <data name="n_MUST_BE_GREATER_THAN_ZERO" xml:space="preserve">
    <value>n must be greater than 0</value>
  </data>
  <data name="n_MUST_BE_POSITIVE_INT" xml:space="preserve">
    <value>n must be positive int</value>
  </data>
  <data name="OUT_OF_BOUNDS_CONFIDENCE_LEVEL" xml:space="preserve">
    <value>out of bounds confidence level {0}, must be between {1} and {2}</value>
  </data>
  <data name="OUT_OF_BOUNDS_QUANTILE_VALUE" xml:space="preserve">
    <value>out of bounds quantile value: {0}, must be in (0, 100]</value>
  </data>
  <data name="OUT_OF_BOUND_SIGNIFICANCE_LEVEL" xml:space="preserve">
    <value>out of bounds significance level {0}, must be between {1} and {2}</value>
  </data>
  <data name="OUT_OF_ORDER_ABSCISSA_ARRAY" xml:space="preserve">
    <value>the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}</value>
  </data>
  <data name="OUT_OF_RANGE" xml:space="preserve">
    <value>out of range</value>
  </data>
  <data name="OUT_OF_RANGE_LEFT" xml:space="preserve">
    <value>{0} out of ({1}, {2}] range</value>
  </data>
  <data name="OUT_OF_RANGE_RIGHT" xml:space="preserve">
    <value>{0} out of [{1}, {2}) range</value>
  </data>
  <data name="OUT_OF_RANGE_ROOT_OF_UNITY_INDEX" xml:space="preserve">
    <value>out of range root of unity index {0} (must be in [{1};{2}])</value>
  </data>
  <data name="OUT_OF_RANGE_SIMPLE" xml:space="preserve">
    <value>{0} out of [{1}, {2}] range</value>
  </data>
  <data name="OVERFLOW" xml:space="preserve">
    <value>overflow</value>
  </data>
  <data name="OVERFLOW_DURATION" xml:space="preserve">
    <value>The duration cannot be returned for TimeSpan.MinValue because the absolute value of TimeSpan.MinValue exceeds the value of TimeSpan.MaxValue.</value>
  </data>
  <data name="OVERFLOW_IN_ADDITION" xml:space="preserve">
    <value>overflow in addition: {0} + {1}</value>
  </data>
  <data name="OVERFLOW_IN_FRACTION" xml:space="preserve">
    <value>overflow in fraction {0}/{1}, cannot negate</value>
  </data>
  <data name="OVERFLOW_IN_MULTIPLICATION" xml:space="preserve">
    <value>overflow in multiplication: {0} * {1}</value>
  </data>
  <data name="OVERFLOW_IN_SUBTRACTION" xml:space="preserve">
    <value>overflow in subtraction: {0} - {1}</value>
  </data>
  <data name="OVERFLOW_NEGATE_TWOS_COMP_NUM" xml:space="preserve">
    <value>Negating the minimum value of a twos complement number is invalid.</value>
  </data>
  <data name="OVERFLOW_TIMESPAN_TOO_LONG" xml:space="preserve">
    <value>TimeSpan overflowed because the duration is too long.</value>
  </data>
  <data name="PARAMETER_IS_OUT_OF_RANGE" xml:space="preserve">
    <value>{0} is out of range.</value>
  </data>
  <data name="PARAMETER_MUST_BE_HIGHER_THAN" xml:space="preserve">
    <value>Parameter {0} must be higher than {1}.</value>
  </data>
  <data name="PARAMETER_MUST_BE_IN" xml:space="preserve">
    <value>{0} must be in [{1},{2}]</value>
  </data>
  <data name="PRINT_ERROR" xml:space="preserve">
    <value>Print Error</value>
  </data>
  <data name="PRINT_FAILED_IN_PRINTING" xml:space="preserve">
    <value>Failed in Printing, Reason: {0}</value>
  </data>
  <data name="PropertyOrMethodNotImplemented" xml:space="preserve">
    <value>This Property or Method {0} is not implemented.</value>
  </data>
  <data name="RANDOMKEY_MUTATION_WRONG_CLASS" xml:space="preserve">
    <value>RandomKeyMutation works only with RandomKeys, not {0}</value>
  </data>
  <data name="RANDOM_DIMENSION_MUST_BE_GREATER_THAN_ZERO" xml:space="preserve">
    <value>Dimension must be greater than zero</value>
  </data>
  <data name="RANDOM_NUMBER_OF_VALUES_MUST_BE_GREATER_THAN_ZERO" xml:space="preserve">
    <value>Number of values must be greater than zero</value>
  </data>
  <data name="RESULT_TOO_LARGE_REPRESENT_IN_A_LONG_INTEGER" xml:space="preserve">
    <value>result too large to represent in a long integer</value>
  </data>
  <data name="SET_IS_A_READ_ONLY" xml:space="preserve">
    <value>Set is a read only set.</value>
    <comment>_SET</comment>
  </data>
  <data name="SINGULAR_MATRIX" xml:space="preserve">
    <value>matrix is singular</value>
  </data>
  <data name="SINGULAR_OPERATOR" xml:space="preserve">
    <value>operator is singular</value>
  </data>
  <data name="SINGULAR_VECTORS_WERE_NOT_COMPUTED" xml:space="preserve">
    <value>The singular vectors were not computed.</value>
  </data>
  <data name="SOURCE_AND_INDEXES_ARRAYS_MUST_HAVE_THE_SAME_DIMENSION" xml:space="preserve">
    <value>Source and indexes arrays must have the same dimension for in-place operations.</value>
  </data>
  <data name="START_POSITION" xml:space="preserve">
    <value>start position ({0})</value>
  </data>
  <data name="SUBARRAY_ENDS_AFTER_ARRAY_END" xml:space="preserve">
    <value>subarray ends after array end</value>
  </data>
  <data name="THE_DESTINATION_MATRIX_MUST_BE_BIG_ENOUGH" xml:space="preserve">
    <value>The destination matrix must be big enough to accommodate the results.</value>
  </data>
  <data name="TREEDICTIONARY_AN_ELEMENT_WITH_THE_SAME_KEY_ALREADY_EXISTS" xml:space="preserve">
    <value>An element with the same key already exists in the dictionary</value>
  </data>
  <data name="TREEDICTIONARY_ARRAY_NOT_SUFFICIENT_SIZE" xml:space="preserve">
    <value>Array not sufficient size</value>
  </data>
  <data name="UNSUPPORTED_OPERATION" xml:space="preserve">
    <value>unsupported operation</value>
  </data>
  <data name="Utility_ArgumentChecker_Array_NotEmpty_InputParameterArrayMustNotBeEmpty" xml:space="preserve">
    <value>Input parameter array '{0}' must not be empty</value>
  </data>
  <data name="Utility_ArgumentChecker_Collection_NotEmpty_InputParameterCollectionMustNotBeEmpty" xml:space="preserve">
    <value>Input parameter collection '{0}' must not be empty</value>
  </data>
  <data name="Utility_ArgumentChecker_Double_AlmostNotNegative_InputParameterMustBeGreaterThanZero" xml:space="preserve">
    <value>Input parameter '{0}' must be greater than zero</value>
  </data>
  <data name="Utility_ArgumentChecker_Double_AlmostNotZero_InputParameterMustNotBeZero" xml:space="preserve">
    <value>Input parameter '{0}' must not be zero</value>
  </data>
  <data name="Utility_ArgumentChecker_Double_NotNegativeOrZero_InputParameterMustNotBeNegativeOrZero" xml:space="preserve">
    <value>Input parameter '{0}' must not be negative or zero</value>
  </data>
  <data name="Utility_ArgumentChecker_DynamicArray_NoNulls_InputParameterArrayMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter array '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_DynamicList_NoNulls_InputParameterListMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter list '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_Enumerable_NotEmpty_InputParameterIterableMustNotBeEmpty" xml:space="preserve">
    <value>Input parameter iterable '{0}' must not be empty</value>
  </data>
  <data name="Utility_ArgumentChecker_GenericArray2D_NoNulls_InputParameter2DArrayMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter 2D array '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_GenericArray_NoNulls_InputParameterArrayMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter array '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_GenericEnumerable_NoNulls_InputParameterEnumerableMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter enumerable '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_GenericList_NoNulls_InputParameterListMustNotContainNullAtIndex" xml:space="preserve">
    <value>Input parameter list '{0}' must not contain null at index {1}</value>
  </data>
  <data name="Utility_ArgumentChecker_Generic_InOrderOrEqual_InputParameterMustBeBefore" xml:space="preserve">
    <value>Input parameter '{0}' must be before '{1}'</value>
  </data>
  <data name="Utility_ArgumentChecker_Generic_NotNullInjected_InjectedInputParameterMustNotBeNull" xml:space="preserve">
    <value>Injected input parameter '{0}' must not be null</value>
  </data>
  <data name="Utility_ArgumentChecker_Generic_NotNull_InputParameterMustNotBeNull" xml:space="preserve">
    <value>Input parameter '{0}' must not be null</value>
  </data>
  <data name="Utility_ArgumentChecker_Long_NotNegativeOrZero_InputParameterMustNotBeNegativeOrZero" xml:space="preserve">
    <value>Input parameter '{0}' must not be negative or zero</value>
  </data>
  <data name="Utility_ArgumentChecker_String_NotEmpty_InputParameterMustNotBeEmpty" xml:space="preserve">
    <value>Input parameter '{0}' must not be empty</value>
  </data>
  <data name="Utility_Extension_Array_GetSymmetric_MatrixTypeCanBeEitherLowerTriangularOrUpperTrianguler" xml:space="preserve">
    <value>Matrix type can be either LowerTriangular or UpperTrianguler.</value>
  </data>
  <data name="Utility_Extension_Array_SetRow_TheValueArrayMustBeSameLengthOfTheTargetArraysRow" xml:space="preserve">
    <value>The value array must be same length of the target array's row.</value>
  </data>
  <data name="Utility_Extension_Array_ToUpperTriangular_OnlyLowerTriangularUpperTriangularAndDiagonalMatricesAreSupportedAtThisTime" xml:space="preserve">
    <value>Only LowerTriangular, UpperTriangular and Diagonal matrices are supported at this time.</value>
  </data>
  <data name="Utility_Extension_Array_Transpose_OnlySquareMatricesCanBeTransposedInPlace" xml:space="preserve">
    <value>Only square matrices can be transposed in place.</value>
  </data>
  <data name="Utility_Extension_Array_Transpose_TheGivenObjectMustInheritFromSystemArray" xml:space="preserve">
    <value>The given object must inherit from System.Array.</value>
  </data>
  <data name="ZERO_DENOMINATOR" xml:space="preserve">
    <value>denominator must be different from 0</value>
  </data>
  <data name="ZERO_DENOMINATOR_IN_FRACTION" xml:space="preserve">
    <value>zero denominator in fraction {0}/{1}</value>
  </data>
  <data name="ZERO_FRACTION_TO_DIVIDE_BY" xml:space="preserve">
    <value>the fraction to divide by must not be zero: {0}/{1}</value>
  </data>
  <data name="ZERO_NOT_ALLOWED" xml:space="preserve">
    <value>zero not allowed here</value>
  </data>
</root>